"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isClientConnected = exports.isLocalhost = exports.isEmpty = exports.currentUnix = exports.getGlobalTraceo = exports.toDecimalNumber = exports.getOsDetails = exports.getProtocol = exports.getIp = void 0;
const os = __importStar(require("os"));
const getIp = (req) => {
    return req.headers["x-forwarded-for"] || req.socket.remoteAddress;
};
exports.getIp = getIp;
const getProtocol = (req) => {
    return req.protocol === "https" || req.secure ? "https" : "http";
};
exports.getProtocol = getProtocol;
const getOsDetails = () => {
    return {
        arch: os.arch(),
        platform: os.platform(),
        name: os.release(),
        machine: os.machine(),
        node: process.versions["node"],
        v8: process.versions["v8"]
    };
};
exports.getOsDetails = getOsDetails;
const toDecimalNumber = (val, decimal = 2) => Number(val.toFixed(decimal));
exports.toDecimalNumber = toDecimalNumber;
const getGlobalTraceo = () => {
    if (global && typeof global === "object" && global["__TRACEO__"]) {
        return global["__TRACEO__"];
    }
    return {
        headers: {},
        options: {
            apiKey: undefined,
            host: undefined
        }
    };
};
exports.getGlobalTraceo = getGlobalTraceo;
const currentUnix = () => {
    return Math.floor(Date.now() / 1000);
};
exports.currentUnix = currentUnix;
const isEmpty = (obj) => Object.keys(obj).length === 0;
exports.isEmpty = isEmpty;
const isLocalhost = (ip) => {
    return ip === "::1" || ip === "127.0.0.1" ? true : false;
};
exports.isLocalhost = isLocalhost;
const isClientConnected = () => !(0, exports.isEmpty)((0, exports.getGlobalTraceo)());
exports.isClientConnected = isClientConnected;
