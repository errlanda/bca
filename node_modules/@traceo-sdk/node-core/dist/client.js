"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreClient = void 0;
const version_1 = require("./version");
class CoreClient {
    constructor(apiKey, _a) {
        var { collectMetrics = true, offline = false } = _a, opts = __rest(_a, ["collectMetrics", "offline"]);
        this.configGlobalClient();
        this.options = Object.assign(Object.assign({}, opts), { collectMetrics,
            offline,
            apiKey });
        this.headers = {
            "x-sdk-name": "node",
            "x-sdk-version": version_1.TRACEO_SDK_VERSION,
            "x-sdk-key": apiKey
        };
        if (!this.isOffline) {
            this.initSDK();
        }
        else {
            console.warn("Traceo does not collect any data because it is offline mode.");
        }
    }
    configGlobalClient() {
        global["__TRACEO__"] = this;
    }
    get isOffline() {
        return this.options.offline;
    }
}
exports.CoreClient = CoreClient;
