"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const utils_1 = require("./utils");
/**
 * Http client for SDK requestst
 */
class HttpClient {
    constructor() { }
}
exports.HttpClient = HttpClient;
_a = HttpClient;
/**
 * Make http/s request to Traceo platoform.
 *
 * Default request method is POST, in this case in hedaers is passed "Content-Type": "application/json".
 * URL is concatenation of passed host to client and pathanme to this method.
 * Use callback/onError callbacks to handle action after operation.
 */
HttpClient.request = ({ url, method = "POST", body, onError, callback }) => {
    const options = Object.assign(Object.assign({}, _a.requestHeaders(method)), _a.requestOptions(url, method));
    const httpModule = _a.requestModule();
    const request = httpModule.request(options, callback);
    request.on("error", () => onError);
    _a.requestWriteBody(method, request, body);
    request.end();
};
HttpClient.requestWriteBody = (method, request, body) => {
    if (method === "POST") {
        request.write(JSON.stringify(body));
    }
};
HttpClient.requestModule = () => {
    const protocol = _a.clientURL().protocol;
    return protocol == "http:" ? http : https;
};
HttpClient.clientURL = () => {
    return new URL((0, utils_1.getGlobalTraceo)().options.host);
};
HttpClient.requestOptions = (url, method) => {
    const host = (0, utils_1.getGlobalTraceo)().options.host;
    const reqUrl = new URL(host);
    const path = new URL(url, host);
    return {
        protocol: reqUrl.protocol,
        port: reqUrl.port,
        host: reqUrl.hostname,
        method,
        path: path.pathname
    };
};
HttpClient.requestHeaders = (method) => {
    const headers = (0, utils_1.getGlobalTraceo)().headers;
    if (method !== "POST")
        return headers;
    return {
        headers: Object.assign({ "Content-Type": "application/json" }, headers)
    };
};
