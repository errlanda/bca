"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const util_1 = require("util");
const node_core_1 = require("@traceo-sdk/node-core");
const DEFAULT_EXPORT_INTERVAL = 15000;
class Logger {
    constructor() {
        this.logsQueue = [];
        this.INTERVAL = DEFAULT_EXPORT_INTERVAL;
        this.logsQueue = [];
        const client = node_core_1.utils.getGlobalTraceo();
        const scrapLogsInterval = client.options.exportIntervalMillis;
        if (scrapLogsInterval && scrapLogsInterval >= DEFAULT_EXPORT_INTERVAL) {
            this.INTERVAL = scrapLogsInterval;
        }
        this.register();
    }
    register() {
        setInterval(() => this.sendLogs(), this.INTERVAL);
    }
    log(...args) {
        return this.printMessage(this.getEntryFromArgs(args), node_core_1.LogLevel.Log);
    }
    error(...args) {
        return this.printMessage(this.getEntryFromArgs(args), node_core_1.LogLevel.Error);
    }
    info(...args) {
        return this.printMessage(this.getEntryFromArgs(args), node_core_1.LogLevel.Info);
    }
    warn(...args) {
        return this.printMessage(this.getEntryFromArgs(args), node_core_1.LogLevel.Warn);
    }
    debug(...args) {
        return this.printMessage(this.getEntryFromArgs(args), node_core_1.LogLevel.Debug);
    }
    printMessage({ message }, level) {
        const timestamp = this.timestamp;
        const messagePayload = `[${level.toUpperCase()}] - ${timestamp} - ${message}`;
        if (level === node_core_1.LogLevel.Error) {
            console[level](`\x1B[31m${messagePayload}\x1B[39m`);
        }
        else {
            console[level](messagePayload);
        }
        const requestPayload = {
            level,
            message,
            timestamp,
            unix: this.getUnix,
            resources: this.resources
        };
        this.logsQueue.push(requestPayload);
    }
    get getUnix() {
        const currentDate = new Date();
        const unixTimestamp = Math.floor(currentDate.getTime() / 1000);
        const milliseconds = currentDate.getMilliseconds();
        const unixWithMilliseconds = unixTimestamp * 1000 + milliseconds;
        return unixWithMilliseconds;
    }
    async sendLogs() {
        if (this.logsQueue.length > 0) {
            node_core_1.HttpClient.request({
                url: node_core_1.CAPTURE_ENDPOINT.LOG,
                body: this.logsQueue,
                onError: (error) => {
                    console.error(`Traceo Error. Something went wrong while sending new Logs to Traceo. Please report this issue.`);
                    console.error(`Caused by: ${error.message}`);
                },
                callback: () => {
                    this.logsQueue = [];
                }
            });
        }
    }
    get timestamp() {
        const date = new Date();
        const year = date.getFullYear().toString().padStart(4, "0");
        const month = (date.getMonth() + 1).toString().padStart(2, "0");
        const day = date.getDate().toString().padStart(2, "0");
        const hours = date.getHours().toString().padStart(2, "0");
        const minutes = date.getMinutes().toString().padStart(2, "0");
        const seconds = date.getSeconds().toString().padStart(2, "0");
        const milliseconds = date.getMilliseconds().toString().padStart(3, "0");
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}:${milliseconds}`;
    }
    get resources() {
        var _a;
        return {
            nodeVersion: process.env["npm_package_engines_node"],
            packageName: process.env["npm_package_name"],
            packageVersion: process.env["npm_package_version"],
            traceoVersion: (_a = process.env["npm_package_dependencies_@traceo-sdk/node"]) !== null && _a !== void 0 ? _a : process.env["npm_package_devDependencies_@traceo-sdk/node"]
        };
    }
    getEntryFromArgs(args) {
        return Object.assign({}, {
            message: util_1.format.apply(null, args)
        });
    }
}
exports.Logger = Logger;
