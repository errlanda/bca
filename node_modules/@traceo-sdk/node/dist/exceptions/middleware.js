"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMiddleware = void 0;
const node_core_1 = require("@traceo-sdk/node-core");
const handler_1 = require("./handler");
/**
 * Base middleware to catch and intercept error across the express app.
 * This middleware catch errors only from the no-async methods.
 *
 * To catch errors from async functions, we suggest to use `catchException` instead.
 *
 * The simplest way to use it in Express.js and JavaScript:
 *
 * @example
 * ```
 *
 * app.use(Middleware.errorMiddleware());
 * ```
 *
 * Using Express.js with Typescript, middleware must be cast to express.ErrorRequestHandler.
 *
 * @example
 * ```
 *
 * app.use(Middleware.errorMiddleware() as express.ErrorRequestHandler);
 * ```
 *
 */
const errorMiddleware = (options = {}) => {
    return async function errorMiddleware(error, req, _res, next) {
        if (!node_core_1.utils.isClientConnected()) {
            next(error);
            return;
        }
        if (isToCatch(req, options)) {
            await (0, handler_1.catchException)(error);
        }
        next(error);
    };
};
exports.errorMiddleware = errorMiddleware;
const isToCatch = (req, options = {}) => {
    if (options.allowHttp !== undefined && !options.allowHttp) {
        const isSecure = node_core_1.utils.getProtocol(req) === "https" ? true : false;
        if (!isSecure) {
            return false;
        }
    }
    if (options.allowLocalhost !== undefined && !options.allowLocalhost) {
        const ip = node_core_1.utils.getIp(req);
        if (node_core_1.utils.isLocalhost(ip)) {
            return false;
        }
    }
    return true;
};
