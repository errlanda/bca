"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsRunner = void 0;
const cpu_usage_1 = require("./default/cpu-usage");
const event_loop_1 = require("./default/event-loop");
const heap_1 = require("./default/heap");
const memory_usage_1 = require("./default/memory-usage");
const node_core_1 = require("@traceo-sdk/node-core");
const os = __importStar(require("os"));
/**
 * Runner for metrics collecting
 */
const DEFAULT_INTERVAL = 15000; //ms -> 15s
class MetricsRunner {
    constructor() {
        this.client = node_core_1.utils.getGlobalTraceo();
        if (!this.client.options.collectMetrics) {
            return;
        }
        this.interval = this.client.options.exportIntervalMillis || DEFAULT_INTERVAL;
        this.cpuUsage = new cpu_usage_1.CpuUsageMetrics();
        this.eventLoop = new event_loop_1.EventLoopMetrics();
        this.heap = new heap_1.HeapMetrics();
        this.memoryUsage = new memory_usage_1.MemoryUsageMetrics();
    }
    register() {
        setInterval(() => this.collectMetrics(), this.interval);
    }
    collectMetrics() {
        const cpuUsage = this.cpuUsage.collect();
        const eventLoop = this.eventLoop.collect();
        const heap = this.heap.collect();
        const memory = this.memoryUsage.collect();
        const metrics = [
            ...cpuUsage,
            ...eventLoop,
            ...heap,
            ...memory,
            ...this.loadAvg
        ];
        if (metrics.length === 0) {
            return;
        }
        node_core_1.HttpClient.request({
            url: node_core_1.CAPTURE_ENDPOINT.METRICS,
            body: metrics,
            onError: (error) => {
                console.error(`Traceo Error. Something went wrong while sending new Log to Traceo. Please report this issue.`);
                console.error(`Caused by: ${error.message}`);
            }
        });
    }
    get loadAvg() {
        const load = node_core_1.utils.toDecimalNumber(os.loadavg()[0]);
        return [
            {
                name: "load_avg",
                value: load,
                unixTimestamp: node_core_1.utils.currentUnix(),
                type: node_core_1.TraceoMetricType.GAUGE
            }
        ];
    }
}
exports.MetricsRunner = MetricsRunner;
