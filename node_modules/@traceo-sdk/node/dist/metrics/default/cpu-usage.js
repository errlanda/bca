"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CpuUsageMetrics = void 0;
const os = __importStar(require("os"));
const node_core_1 = require("@traceo-sdk/node-core");
class CpuUsageMetrics {
    constructor() {
        this.measureStart = this.calculateAverageCpuUsage();
    }
    collect() {
        const endMeasure = this.calculateAverageCpuUsage();
        const idleDifference = endMeasure.idle - this.measureStart.idle;
        const totalDifference = endMeasure.total - this.measureStart.total;
        const cpuUsage = Math.round((100 - (100 * idleDifference) / totalDifference) * 100) / 100;
        return [
            {
                name: "cpu_usage",
                type: node_core_1.TraceoMetricType.GAUGE,
                unixTimestamp: node_core_1.utils.currentUnix(),
                value: cpuUsage
            }
        ];
    }
    calculateAverageCpuUsage() {
        const cpus = os.cpus();
        let totalIdle = 0;
        let totalTick = 0;
        for (let i = 0, len = cpus.length; i < len; i++) {
            const cpu = cpus[i];
            for (const type in cpu.times) {
                totalTick += cpu.times[type];
            }
            totalIdle += cpu.times.idle;
        }
        return { idle: totalIdle / cpus.length, total: totalTick / cpus.length };
    }
}
exports.CpuUsageMetrics = CpuUsageMetrics;
