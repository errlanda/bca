"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryUsageMetrics = void 0;
const os = __importStar(require("os"));
const node_core_1 = require("@traceo-sdk/node-core");
class MemoryUsageMetrics {
    constructor() { }
    collect() {
        return [
            {
                name: "memory_usage_mb",
                type: node_core_1.TraceoMetricType.GAUGE,
                unixTimestamp: node_core_1.utils.currentUnix(),
                value: this.usedMemory
            },
            {
                name: "memory_usage_percentage",
                type: node_core_1.TraceoMetricType.GAUGE,
                unixTimestamp: node_core_1.utils.currentUnix(),
                value: this.percentageUsage
            }
        ];
    }
    get percentageUsage() {
        return node_core_1.utils.toDecimalNumber((this.usedMemory / this.totalMemory) * 100);
    }
    get usedMemory() {
        return Math.round(this.totalMemory - this.freeMemory);
    }
    get freeMemory() {
        return Math.round(os.freemem() / 1024 / 1024);
    }
    get totalMemory() {
        return Math.round(os.totalmem() / 1024 / 1024);
    }
}
exports.MemoryUsageMetrics = MemoryUsageMetrics;
