"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventLoopMetrics = void 0;
const node_core_1 = require("@traceo-sdk/node-core");
let perf_hooks;
try {
    perf_hooks = require("perf_hooks");
}
catch (_a) {
    console.warn(`[Traceo] Your NodeJS version is too old to user perf_hooks.`);
}
class EventLoopMetrics {
    constructor() {
        if (perf_hooks && perf_hooks.monitorEventLoopDelay) {
            this.histogram = perf_hooks.monitorEventLoopDelay({
                resolution: 10
            });
            this.histogram.enable();
        }
    }
    collect() {
        const metrics = ["loop_min", "loop_max", "loop_mean", "loop_stddev"];
        const data = {
            loop_min: node_core_1.utils.toDecimalNumber(this.histogram.min / 1e6),
            loop_max: node_core_1.utils.toDecimalNumber(this.histogram.max / 1e6),
            loop_mean: node_core_1.utils.toDecimalNumber(this.histogram.mean / 1e6),
            loop_stddev: node_core_1.utils.toDecimalNumber(this.histogram.stddev / 1e6)
        };
        this.histogram.reset();
        const response = metrics.map((metric) => ({
            name: metric,
            type: node_core_1.TraceoMetricType.GAUGE,
            unixTimestamp: node_core_1.utils.currentUnix(),
            value: data[metric]
        }));
        return response;
    }
}
exports.EventLoopMetrics = EventLoopMetrics;
